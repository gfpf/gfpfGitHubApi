plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
}

android {
    namespace 'com.beblue.gfpf.test.bebluegfpftest'
    compileSdk rootProject.compileSdkVersion

    signingConfigs {
        signature {
            keyAlias 'key0'
            keyPassword '123456'
            storeFile file('/Users/Gus/Documents/android-projects/BeBlueGFPFTest/debug.keystore')
            storePassword '123456'
        }
    }

    defaultConfig {
        applicationId "com.beblue.gfpf.test.bebluegfpftest"
        minSdk rootProject.minSdk
        targetSdk rootProject.targetSdk
        versionCode 1
        versionName "1.0"

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            // Run code coverage reports by default on debug builds.
            // testCoverageEnabled = true
            applicationIdSuffix ".debug"
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.signature
        }
    }

    // Specifies flavor dimensions.
    flavorDimensions "default"
    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            applicationIdSuffix ".mock.debug"
            versionNameSuffix "-mock-debug"
        }

        prod {
            applicationIdSuffix ".prod.debug"
            versionNameSuffix "-prod-debug"

            versionName "$defaultConfig.versionName" + ".test"
            /*resValue "string", "app_name", "App-Test"*/
            /*manifestPlaceholders =
                    [
                            appIcon: "@mipmap/ic_felix_the_cat"
                    ]*/
        }
    }
    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    buildFeatures {
        dataBinding = true
    }

    hilt {
        enableAggregatingTask = true
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/NOTICE', 'META-INF/LICENSE']
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(":github_api")

    // Local tests
    implementation 'androidx.test:monitor:1.7.1'
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation 'androidx.test.ext:junit-ktx:1.2.1'
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    testImplementation "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"

    // Instrumentation & UI tests
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.annotation:annotation:1.8.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'

    // Lifecycle components
    implementation "android.arch.lifecycle:extensions:$rootProject.archLifecycleVersion"
    //annotationProcessor "android.arch.lifecycle:compiler:$rootProject.archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.8.3"

    // DB
    implementation "android.arch.persistence.room:runtime:$rootProject.roomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$rootProject.roomVersion"
    /*androidTestImplementation "android.arch.persistence.room:testing:$rootProject.roomVersion"*/

    // DI
    // Hilt dependencies
    implementation("com.google.dagger:hilt-android:2.51.1")
    kapt 'com.google.dagger:hilt-android-compiler:2.51.1'

    /*implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"*/

    // Image & Design
    implementation "com.squareup.picasso:picasso:$rootProject.picassoVersion"
    implementation 'com.github.stfalcon:frescoimageviewer:0.5.0'
    implementation 'com.facebook.fresco:fresco:3.2.0'
    implementation 'me.relex:photodraweeview:2.1.0'
    implementation 'jp.wasabeef:recyclerview-animators:4.0.2'
    implementation 'com.google.android.material:material:1.12.0'
    /*implementation 'com.github.chrisbanes:PhotoView:2.1.3'*/

    // Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")
    //implementation("org.jetbrains.kotlinx:kotlinx-coroutines-rx2:1.7.3")
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3"

    // OkHttp interceptors for logging
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'

    // Retrofit and OkHttp
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'com.google.android.gms:play-services-auth:21.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    //Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.nav_version"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
}
